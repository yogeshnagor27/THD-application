import { __decorate, __param } from "tslib";
import { Inject, Injectable, InjectionToken } from '@angular/core';
export var CacheMechanism;
(function (CacheMechanism) {
    CacheMechanism.LocalStorage = 'LocalStorage';
    CacheMechanism.Cookie = 'Cookie';
})(CacheMechanism || (CacheMechanism = {}));
export var CACHE_NAME = new InjectionToken('CACHE_NAME');
export var CACHE_MECHANISM = new InjectionToken('CACHE_MECHANISM');
export var COOKIE_EXPIRY = new InjectionToken('COOKIE_EXPIRY');
var DEFAULT_CACHE_NAME = 'lang';
var DEFAULT_CACHE_MECHANISM = CacheMechanism.LocalStorage;
var DEFAULT_COOKIE_EXPIRY = 720;
var TranslateCacheSettings = /** @class */ (function () {
    function TranslateCacheSettings(cacheName, cacheMechanism, cookieExpiry) {
        if (cacheName === void 0) { cacheName = DEFAULT_CACHE_NAME; }
        if (cacheMechanism === void 0) { cacheMechanism = DEFAULT_CACHE_MECHANISM; }
        if (cookieExpiry === void 0) { cookieExpiry = DEFAULT_COOKIE_EXPIRY; }
        this.cacheName = cacheName;
        this.cacheMechanism = cacheMechanism;
        this.cookieExpiry = cookieExpiry;
    }
    TranslateCacheSettings.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [CACHE_NAME,] }] },
        { type: String, decorators: [{ type: Inject, args: [CACHE_MECHANISM,] }] },
        { type: Number, decorators: [{ type: Inject, args: [COOKIE_EXPIRY,] }] }
    ]; };
    TranslateCacheSettings = __decorate([
        Injectable(),
        __param(0, Inject(CACHE_NAME)),
        __param(1, Inject(CACHE_MECHANISM)),
        __param(2, Inject(COOKIE_EXPIRY))
    ], TranslateCacheSettings);
    return TranslateCacheSettings;
}());
export { TranslateCacheSettings };
/* Not injectable */
var TranslateCacheService = /** @class */ (function () {
    function TranslateCacheService(translateService, translateCacheSettings) {
        this.translateService = translateService;
        this.translateCacheSettings = translateCacheSettings;
    }
    TranslateCacheService.prototype.init = function () {
        var _this = this;
        this.translateService.onLangChange
            .subscribe(function (event) {
            if (_this.translateCacheSettings.cacheMechanism === CacheMechanism.LocalStorage) {
                return _this.cacheWithLocalStorage(event.lang);
            }
            if (_this.translateCacheSettings.cacheMechanism === CacheMechanism.Cookie) {
                return _this.cacheWithCookies(event.lang);
            }
        });
        var currentLang = this.getCachedLanguage() || this.translateService.getBrowserLang();
        if (currentLang) {
            this.translateService.use(currentLang);
        }
    };
    TranslateCacheService.prototype.getCachedLanguage = function () {
        if (this.translateCacheSettings.cacheMechanism === CacheMechanism.LocalStorage) {
            return this.cacheWithLocalStorage();
        }
        if (this.translateCacheSettings.cacheMechanism === CacheMechanism.Cookie) {
            return this.cacheWithCookies();
        }
    };
    TranslateCacheService.prototype.cacheWithLocalStorage = function (value) {
        if (typeof window === 'undefined' || typeof window.localStorage === 'undefined') {
            return;
        }
        try {
            if (value) {
                window.localStorage.setItem(this.translateCacheSettings.cacheName, value);
                return;
            }
            return window.localStorage.getItem(this.translateCacheSettings.cacheName);
        }
        catch (e) {
            return;
        }
    };
    TranslateCacheService.prototype.cacheWithCookies = function (value) {
        if (typeof document === 'undefined' || typeof document.cookie === 'undefined') {
            return;
        }
        try {
            var name_1 = encodeURIComponent(this.translateCacheSettings.cacheName);
            if (value) {
                var date = new Date();
                date.setTime(date.getTime() + this.translateCacheSettings.cookieExpiry * 3600000);
                document.cookie = name_1 + "=" + encodeURIComponent(value) + ";expires=" + date.toUTCString();
                return;
            }
            var regexp = new RegExp('(?:^' + name_1 + '|;\\s*' + name_1 + ')=(.*?)(?:;|$)', 'g');
            var result = regexp.exec(document.cookie);
            return decodeURIComponent(result[1]);
        }
        catch (e) {
            return;
        }
    };
    return TranslateCacheService;
}());
export { TranslateCacheService };
//# sourceMappingURL=data:application/json;base64,