import { __decorate, __param } from "tslib";
import { Inject, Injectable, InjectionToken } from '@angular/core';
export var CacheMechanism;
(function (CacheMechanism) {
    CacheMechanism.LocalStorage = 'LocalStorage';
    CacheMechanism.Cookie = 'Cookie';
})(CacheMechanism || (CacheMechanism = {}));
export const CACHE_NAME = new InjectionToken('CACHE_NAME');
export const CACHE_MECHANISM = new InjectionToken('CACHE_MECHANISM');
export const COOKIE_EXPIRY = new InjectionToken('COOKIE_EXPIRY');
const DEFAULT_CACHE_NAME = 'lang';
const DEFAULT_CACHE_MECHANISM = CacheMechanism.LocalStorage;
const DEFAULT_COOKIE_EXPIRY = 720;
let TranslateCacheSettings = class TranslateCacheSettings {
    constructor(cacheName = DEFAULT_CACHE_NAME, cacheMechanism = DEFAULT_CACHE_MECHANISM, cookieExpiry = DEFAULT_COOKIE_EXPIRY) {
        this.cacheName = cacheName;
        this.cacheMechanism = cacheMechanism;
        this.cookieExpiry = cookieExpiry;
    }
};
TranslateCacheSettings.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [CACHE_NAME,] }] },
    { type: String, decorators: [{ type: Inject, args: [CACHE_MECHANISM,] }] },
    { type: Number, decorators: [{ type: Inject, args: [COOKIE_EXPIRY,] }] }
];
TranslateCacheSettings = __decorate([
    Injectable(),
    __param(0, Inject(CACHE_NAME)),
    __param(1, Inject(CACHE_MECHANISM)),
    __param(2, Inject(COOKIE_EXPIRY))
], TranslateCacheSettings);
export { TranslateCacheSettings };
/* Not injectable */
export class TranslateCacheService {
    constructor(translateService, translateCacheSettings) {
        this.translateService = translateService;
        this.translateCacheSettings = translateCacheSettings;
    }
    init() {
        this.translateService.onLangChange
            .subscribe((event) => {
            if (this.translateCacheSettings.cacheMechanism === CacheMechanism.LocalStorage) {
                return this.cacheWithLocalStorage(event.lang);
            }
            if (this.translateCacheSettings.cacheMechanism === CacheMechanism.Cookie) {
                return this.cacheWithCookies(event.lang);
            }
        });
        const currentLang = this.getCachedLanguage() || this.translateService.getBrowserLang();
        if (currentLang) {
            this.translateService.use(currentLang);
        }
    }
    getCachedLanguage() {
        if (this.translateCacheSettings.cacheMechanism === CacheMechanism.LocalStorage) {
            return this.cacheWithLocalStorage();
        }
        if (this.translateCacheSettings.cacheMechanism === CacheMechanism.Cookie) {
            return this.cacheWithCookies();
        }
    }
    cacheWithLocalStorage(value) {
        if (typeof window === 'undefined' || typeof window.localStorage === 'undefined') {
            return;
        }
        try {
            if (value) {
                window.localStorage.setItem(this.translateCacheSettings.cacheName, value);
                return;
            }
            return window.localStorage.getItem(this.translateCacheSettings.cacheName);
        }
        catch (e) {
            return;
        }
    }
    cacheWithCookies(value) {
        if (typeof document === 'undefined' || typeof document.cookie === 'undefined') {
            return;
        }
        try {
            const name = encodeURIComponent(this.translateCacheSettings.cacheName);
            if (value) {
                const date = new Date();
                date.setTime(date.getTime() + this.translateCacheSettings.cookieExpiry * 3600000);
                document.cookie = `${name}=${encodeURIComponent(value)};expires=${date.toUTCString()}`;
                return;
            }
            const regexp = new RegExp('(?:^' + name + '|;\\s*' + name + ')=(.*?)(?:;|$)', 'g');
            const result = regexp.exec(document.cookie);
            return decodeURIComponent(result[1]);
        }
        catch (e) {
            return;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,